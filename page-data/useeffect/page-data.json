{"componentChunkName":"component---src-templates-lesson-template-js","path":"/useeffect","result":{"data":{"markdownRemark":{"html":"<p>We have enough to start making some requests now. We want the app to request an initial set of pets on initial load of the page. So let's make that happen using a special hook called <code class=\"language-text\">useEffect</code>. <code class=\"language-text\">useEffect</code> allows you to say \"do a render of this component first so the user can see <em>something</em> then as soon as the render is done, <em>then</em> do something (the something here being an effect.) In our case, we want the user to see our UI first then we want to make a request to the API so we can that initial list of pets.</p>\n<p>Add this to SearchParams.js</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// change import at top</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useEffect<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Pet <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Pet\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// add to the other useStates inside component at top</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>pets<span class=\"token punctuation\">,</span> setPets<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// add inside component, beneath all the `useState` setup</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">requestPets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eslint-disable-line react-hooks/exhaustive-deps</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">requestPets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://pet-api-v2.azurewebsites.net/api/pets?animal=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>animal<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;location=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>location<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;breed=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>breed<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">setPets</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>pets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// in jsx, under form, inside the larger div</span>\n<span class=\"token punctuation\">{</span>\n  pets<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pet</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Pet name<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>pet<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span> animal<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>pet<span class=\"token punctuation\">.</span>animal<span class=\"token punctuation\">}</span> breed<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>pet<span class=\"token punctuation\">.</span>breed<span class=\"token punctuation\">}</span> key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>pet<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>üö® If you're seeing an error about regeneratorRuntime, please go back to the Browserslist lesson and make sure you followed that. If you have and it's still broke, please delete your node_modules, .cache, and dist directories, run <code class=\"language-text\">npm install</code> again, and try running <code class=\"language-text\">npm run dev</code> again.</p>\n</blockquote>\n<ul>\n<li>We're taking advantage of closures here that if we define the requestPets function <em>inside</em> of the render that it will have access to that scope and can use all the hooks there.</li>\n<li>We could have actually put requestPets inside of the effect but we're going to use it again here in a sec with the submit button.</li>\n<li>the <code class=\"language-text\">[]</code> at the end of the useEffect is where you declare your data dependencies. React wants to know <em>when</em> to run that effect again. You don't give it data dependencies, it assumes any time any hook changes that you should run the effect again. This is bad because that would mean any time setPets gets called it'd re-run render and all the hooks again. See a problem there? It'd run infinitely since requestPets calls setPets.</li>\n<li>You can instead provide which hooks to watch for changes for. In our case, we actually only want it to run once, on creation of the component, and then to not run that effect again. (we'll do searching later via clicking the submit button) You can accomplish this only-run-on-creation by providing an empty array.</li>\n<li>The <code class=\"language-text\">// eslint-disable-line react-hooks/exhaustive-deps</code> tells eslint to shut up about this one run on this one line. Why? Because eslint tries to help you with you the data dependencies rule by watching for anything that <em>could</em> change. In this case, in theory the function could change but we know it's not important. You'll end up silencing this rule a fair bit.</li>\n<li>At the end, we gather take the pets we got back from the API and create Pet components out of each of them.</li>\n</ul>\n<blockquote>\n<p>üèÅ <a href=\"https://github.com/btholt/citr-v6-project/tree/master/05-useeffect\">Click here to see the state of the project up until now: 05-useeffect</a></p>\n</blockquote>","frontmatter":{"path":"/useeffect","title":"useEffect","order":"4C","section":"Core React Concepts","description":"useEffect is a criticl hook for React, allowing developers to do asynchronous actions like making HTTP requests"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"3G","path":"/browserlist","title":"Browserlist"}}},{"node":{"frontmatter":{"order":"3F","path":"/babel","title":"Babel"}}},{"node":{"frontmatter":{"order":"5B","path":"/class-components","title":"Class Components"}}},{"node":{"frontmatter":{"order":"4F","path":"/component-composition","title":"Component Composition"}}},{"node":{"frontmatter":{"order":"2B","path":"/components","title":"Components"}}},{"node":{"frontmatter":{"order":"4D","path":"/custom-hooks","title":"Custom Hooks"}}},{"node":{"frontmatter":{"order":"3C","path":"/eslint","title":"ESLint"}}},{"node":{"frontmatter":{"order":"3D","path":"/git","title":"Git"}}},{"node":{"frontmatter":{"order":"4E","path":"/handling-user-input","title":"Handling User Input"}}},{"node":{"frontmatter":{"order":"4B","path":"/hooks","title":"Hooks"}}},{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":"4A","path":"/jsx","title":"JSX"}}},{"node":{"frontmatter":{"order":"3A","path":"/npm","title":"npm"}}},{"node":{"frontmatter":{"order":"3B","path":"/prettier","title":"Prettier"}}},{"node":{"frontmatter":{"order":"3E","path":"/parcel","title":"Parcel"}}},{"node":{"frontmatter":{"order":"2A","path":"/pure-react","title":"Pure React"}}},{"node":{"frontmatter":{"order":"5A","path":"/react-router","title":"React Router"}}},{"node":{"frontmatter":{"order":"4C","path":"/useeffect","title":"useEffect"}}}]}},"pageContext":{}},"staticQueryHashes":["2959687377"]}